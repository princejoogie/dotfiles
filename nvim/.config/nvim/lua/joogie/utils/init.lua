local M = {}

M.spinner = { "⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏" }

M.find_git_root = function()
  local current_file = vim.api.nvim_buf_get_name(0)
  local current_dir
  local cwd = vim.fn.getcwd()

  if current_file == "" then
    current_dir = cwd
  else
    current_dir = vim.fn.fnamemodify(current_file, ":h")
  end

  local git_root = vim.fn.systemlist("git -C " .. vim.fn.escape(current_dir, " ") .. " rev-parse --show-toplevel")[1]
  if vim.v.shell_error ~= 0 then
    print("Not a git repository. Searching on current working directory")
    return cwd
  end
  return git_root
end

M.icons = {
  Error = " ",
  Warn = " ",
  Info = " ",
  Hint = " ",
  Success = " ",
}

M.live_grep_git_root = function()
  local git_root = M.find_git_root()
  if git_root then
    require("telescope.builtin").live_grep({
      search_dirs = { git_root },
    })
  end
end

M.cmd = function(command)
  return "<cmd>" .. command .. "<CR>"
end

M.spinner_icon = M.spinner[math.floor(vim.uv.hrtime() / (1e6 * 80)) % #M.spinner + 1]

M.notify_loading = function(msg, id)
  Snacks.notifier(msg, vim.log.levels.INFO, {
    id = id,
    title = "Loading",
    timeout = false,
    opts = function(notif)
      notif.icon = M.spinner_icon
    end,
  })
end

M.exec = function(commands, msg)
  local id = table.concat(commands, " ")
  local _msg = msg or id
  local success_msg = " " .. _msg .. "\n---\n"
  local error_msg = " " .. _msg .. "\n---\n"

  M.notify_loading(_msg, id)

  local function execute_command(command, on_complete)
    local cmd = vim.fn.has("win32") == 1 and { "cmd.exe", "/c", command } or { "/bin/sh", "-c", command }

    vim.fn.jobstart(cmd, {
      stdout_buffered = true,
      stderr_buffered = true,
      on_stdout = function(_, data)
        if data then
          success_msg = success_msg .. table.concat(data, "\n")
        end
      end,
      on_stderr = function(_, err)
        if err then
          error_msg = error_msg .. table.concat(err, "\n")
        end
      end,
      on_exit = function(_, code)
        if code ~= 0 then
          Snacks.notifier(error_msg, vim.log.levels.ERROR, {
            id = id,
            title = "Error",
            icon = M.icons.Error,
          })
        else
          Snacks.notifier(success_msg, vim.log.levels.INFO, {
            id = id,
            title = "Running",
            opts = function(notif)
              notif.icon = M.spinner_icon
            end,
          })
        end
        if on_complete then
          on_complete(code)
        end
      end,
    })
  end

  local function run_next_command(i)
    if i <= #commands then
      local command = commands[i]
      execute_command(command, function(code)
        if code == 0 then
          run_next_command(i + 1)
        end
      end)
    else
      success_msg = success_msg .. "---\n" .. M.icons.Success .. " Job Done"
      Snacks.notifier(success_msg, vim.log.levels.INFO, { id = id, title = "Done" })
    end
  end

  run_next_command(1)
end

M.toggle_diffview = function(cmd)
  if next(require("diffview.lib").views) == nil then
    vim.cmd(cmd)
  else
    vim.cmd("DiffviewClose")
  end
end

M.git = {
  branches = function()
    local git_branches = vim.fn.system("git branch --all --format='%(refname:short)'")
    git_branches = string.gsub(git_branches, "origin/", "")
    git_branches = vim.split(git_branches, "\n")

    local unique_branches = { "HEAD" }

    for _, branch in ipairs(git_branches) do
      if not vim.tbl_contains(unique_branches, branch) then
        table.insert(unique_branches, branch)
      end
    end

    return unique_branches
  end,
  commits = function()
    local git_commits = vim.fn.system("git log --pretty=format:'%h %s' --abbrev-commit --decorate --no-merges")
    git_commits = vim.split(git_commits, "\n")
    return git_commits
  end,
}

M.noop = function() end

M.exclude = {
  "node_modules",
  ".cache",
  ".git",
  ".next",
  ".turbo",
  ".vercel",
  ".expo",
  ".open-next",
  ".sst",
  ".pio",
  "dist",
  "build",
  "out",
  "yarn.lock",
  "package-lock.json",
  "pnpm-lock.yaml",
  "npm-debug.log",
  "yarn-debug.log",
  "yarn-error.log",
  ".pnpm-debug.log",
  ".tsbuildinfo",
}

M.dashboard_header = [[
⠐⢢⠱⡙⢦⢓⠲⡰⢀⠆⢠⠐⠰⡈⠔⡂⠔⡀⠆⡰⢀⠆⡐⠠⢂⠰⠐⢂⠅⠂⠄⠠⠀⠄⠠⠀⠄⡀⠠⠀⠄⠐⡀⠎⠰⢁⠒⡈⠐⠠⠑⢈⠱⠈⠜⠠⠃⡘⠠⠃⠜⡐⠂⠖⠰⡀⢂⠐⡀⢂⠐⠤⡀⢂⠄⢠⠀⠄⠠⠐⠠⢒⠰⡀⠆⠠⢀⠂⠄⠄⡠⢀⢀⠠⢀⡀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠠⠀⠄⠀⠀⠀⠀⠠⠀⠄⠠⠀⡄⢂⠤⡀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠠⠀⠠⠀
⠀⠂⢡⠘⢄⠊⡑⠰⢉⠐⠂⠌⡐⢌⠢⠑⡠⠒⠠⠁⠆⡐⠠⠁⢂⠂⡉⠄⠨⠁⠌⠠⠁⠌⡐⢁⠂⠄⡁⠂⠈⢀⠐⡈⢁⠂⠡⠐⠠⠀⠀⠀⠀⢈⠀⠄⢀⠀⠀⠄⠀⠀⠈⠠⠁⠐⠀⢂⠐⠠⠁⢂⠐⠠⠈⠄⠈⠄⠁⠀⡁⢂⠑⡐⢈⠐⡠⢈⠐⡈⠰⡀⠎⡐⢂⠔⡨⠘⠤⣉⠒⡄⢂⡐⠈⠄⠂⡁⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠈⢀⠁⠀⠀⠀⠀⠈⠄⠡⠈⠄⡑⢠⠃⡖⢡⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠄⠁⠀
⠀⡈⠄⠌⢂⠡⢀⠃⡐⢈⠐⠠⠈⡄⢃⠧⢠⠁⢂⠁⠂⠄⡁⢂⠰⢈⡐⢈⠄⡁⢂⠐⡀⠒⡈⠤⠈⠄⠠⠀⠁⡀⠐⡀⠂⠌⠄⣁⠂⠡⠀⠂⠈⢀⠈⡐⠠⠀⠌⠀⠐⠈⡀⠄⠠⠐⠈⠀⡐⠠⠀⠀⢈⠠⢁⠀⠀⠀⠀⠀⠀⠀⠂⠀⠂⠐⢀⠂⠌⡀⢣⠘⠤⡑⢌⢢⠡⢍⠒⡠⠡⠘⠠⢌⠱⣈⠱⠐⡂⢌⠂⠥⢈⡐⠠⠀⠄⡀⠂⢁⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠂⠁⠂⠐⠠⠑⡈⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⡀⠀⢀⠂
⠐⠠⢈⠐⡈⡐⠂⠌⡐⠠⠌⠠⠁⠠⢁⠊⡐⠈⠄⡈⠐⡠⠐⡠⢑⠢⢌⢂⠒⡄⠢⡐⠠⡑⡈⠄⠃⠌⠐⡀⠁⠀⠐⠠⢉⡐⠈⠄⡈⠄⠡⠀⢀⠀⠂⠄⠡⢈⠀⠂⠁⡐⢀⢂⠁⣀⠆⠑⡈⠡⢌⡑⢪⡐⢡⢂⡀⠀⠤⣀⠀⠄⠀⠀⠀⠐⠀⠀⠀⠀⠀⠉⠐⠡⠊⠤⡙⢌⠓⡤⢃⠡⣁⠂⢒⠠⠡⢈⠐⠠⠊⠄⠡⡀⢃⠍⡰⠠⢁⠂⡈⠄⡐⠠⢀⠂⡀⠄⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠐⢀⠀
⠈⡐⢀⠂⡐⠠⠁⠂⠄⠡⠈⠐⠈⠀⠠⠐⢀⠁⠂⠄⡡⠄⠱⣀⠣⡘⢄⠢⡁⢆⠱⡈⢅⠰⢈⠰⠁⠌⡐⠀⠄⠀⠡⡘⡰⢀⠃⡐⠠⠈⠄⠀⡀⠠⠁⠌⠠⠀⠠⠀⡁⠀⢀⣈⠒⠉⢚⡐⠄⡁⠠⠉⠣⠘⠁⠊⠉⠒⠠⢌⠘⡌⢂⠀⠀⠀⡀⠀⠀⠀⠀⠀⠐⠀⠁⠂⠌⠄⢣⠐⣉⠒⠤⣉⠢⣁⢃⢂⠩⡐⠡⢌⡐⠠⠈⠄⡁⢃⠂⠡⠐⡂⠤⢁⠆⡰⠠⠌⣀⠂⠡⠐⡀⠌⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠈
⠠⠐⡀⠠⠀⡐⠈⡐⠈⠤⢁⠂⠄⡁⠄⠂⠄⣈⠐⡈⠄⡘⢠⢂⠱⡈⠆⠡⠌⡀⢃⠘⡠⢃⡌⢢⢉⡐⠠⠈⢀⠀⠡⢐⠡⢃⡐⠠⠁⠌⠀⡀⢀⠂⠡⠌⠠⠁⣀⣤⡴⠎⠟⣘⣉⣤⣤⣴⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⣿⣾⣷⣦⣅⣊⠐⠀⠀⠑⠬⡄⠀⠀⡄⠀⠀⠐⠤⡈⠀⠘⠤⣉⠒⡄⢡⢂⡌⢆⡣⣍⡓⢆⡘⠤⢁⢂⠐⠠⠈⠄⠡⢈⠔⠡⠘⣀⠣⡘⢄⠊⡅⠒⡄⢂⠌⡀⠄⢂⠐⠠⠀⠄⡀⡀⠀⠄⠠⠀⠄⠠⠀⠄⡀⠄⢀⠁
⡥⣃⠔⡠⠐⡀⠐⠠⢁⠂⠄⡈⠐⠠⠐⢈⠐⢠⠘⣀⠒⡀⠆⢌⠢⡑⢌⠡⠒⡀⢂⠐⠀⠣⣜⢣⠳⣌⢧⡘⡤⣈⠔⡀⠣⢄⡐⢠⢁⠂⡁⠀⠀⡈⠐⢀⣴⡶⢟⣩⣴⣾⣿⣿⣿⣿⣻⣿⣿⣿⣿⡿⢿⣯⣭⣝⣛⡛⠻⠿⢿⣿⣿⣿⣿⣿⣶⣤⣄⡑⠂⠀⠸⡁⠀⢀⠀⠡⠀⠐⠠⠀⢣⠈⡄⢂⠘⢄⠳⢌⡱⢊⠐⡄⠃⡄⠊⠄⡁⢂⠁⠢⠌⢂⠅⡠⠒⠠⠌⠒⡈⠡⢐⠈⡐⡐⢈⠂⡉⠆⡉⠦⡑⣌⠱⣈⠱⡈⢌⠡⡘⠠⠐⡈⠠⠀
⡳⣭⢲⡡⠒⡌⢡⢃⢮⡘⢦⠡⡍⢢⠁⠆⡌⢂⠒⡄⢒⠰⡈⢄⠢⡁⢌⠢⢑⠠⠂⡄⢀⠠⣌⢣⡛⣜⢲⣙⠲⡁⠆⠐⢡⠒⡌⠒⣌⠳⡐⠂⣁⣴⣶⣿⣿⣾⣿⣿⣿⠿⣛⣫⣭⡼⠿⠿⠟⠛⠿⠶⠖⡶⣶⣾⣾⣭⣽⣛⣳⢶⣮⣭⣭⣭⣛⡿⢿⣿⣿⣶⣄⡁⠀⢋⠀⠀⠈⠄⡀⠀⠀⢣⠔⡡⢈⠄⡂⢆⠰⡀⢃⠄⢃⠄⢃⠐⡀⠂⠌⢡⠘⡀⢢⠐⡡⠃⡜⠠⡁⠆⡁⠢⠐⡀⠆⡐⢀⠂⡁⢂⠑⠨⡑⠌⠱⡘⢌⠢⢡⠑⢢⠐⣁⠂
⣗⣣⢇⡳⢩⡐⠡⢎⢲⡙⣎⠱⡘⠤⣉⠒⡌⣡⠓⣌⠣⢒⡉⠦⡑⣌⠢⣑⢊⡔⢣⠜⣣⢗⣮⣷⣻⣬⢳⣌⠣⠐⠀⠈⠄⠒⡈⠔⠠⠃⠀⡶⢉⣿⡿⢋⣼⣿⡿⠟⣛⣫⣭⣤⡶⠾⠿⢶⡛⠡⣍⠡⣍⡫⣍⠛⢿⠿⣷⣾⣭⣭⣟⠻⢿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣶⣄⠈⠂⠀⠀⠰⣀⠀⠀⠈⠔⡁⠢⠌⡐⢂⠁⠆⡈⠆⡈⠄⠂⠄⡑⠈⠄⠂⠄⠡⠘⡀⠣⠐⡡⠐⠌⢠⠡⢁⠒⠠⠐⡠⢂⠐⠠⢈⠐⡀⠌⠐⡀⢂⠁⢂⠩⢀⠣⢄⠣
⢗⡞⣼⢱⢃⡌⠱⡈⠦⡑⢮⡱⣉⠖⡤⢓⠬⣐⠣⢆⡹⢠⡙⢢⠱⣄⠳⣌⠲⡘⢤⢋⡖⣏⢾⡱⣟⣼⢳⣬⢣⡑⠤⡁⢎⢡⠒⠈⠀⢀⡝⣰⣿⠏⣱⡿⢏⣥⠖⣿⠛⠛⢉⣁⡤⠍⠩⠄⠀⠁⡄⠳⢠⡗⢈⣿⠾⠁⣿⣯⠹⣿⣿⣯⢿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣧⣄⠀⠀⠀⠀⠆⠀⠀⠀⠐⢁⠂⠰⢀⠊⠤⠑⡠⢡⠘⡀⠒⠠⠉⡄⢡⠈⢄⠡⢀⠁⠂⠄⠁⠌⡀⢂⠐⡈⢁⠂⡐⠄⢊⠐⡀⠂⠄⡈⠄⠐⠀⡈⠄⢂⠐⡀⢊⠐
⢎⡼⣜⡣⢧⢌⡱⣈⠖⡩⢆⡵⡉⢎⡱⡉⢖⢡⢋⠦⣡⠣⡜⣥⠓⡤⢓⠬⣓⡹⢦⡩⢞⡼⢣⡝⡜⢮⡳⣎⠷⣩⢒⡱⢊⠖⠁⠀⠀⣬⣴⣿⠇⣰⠷⠀⣋⣴⠎⢋⡈⠰⠈⠀⠀⠀⢀⠀⠀⠀⠀⠀⠐⠼⣈⢿⣧⣾⣿⣿⣇⣿⣿⣿⣜⣿⣿⣃⡍⢯⣡⢞⠊⢿⠥⢤⡙⠌⣷⡀⢂⠀⠈⠂⠀⠀⢂⠀⢌⡁⠆⠌⡰⠁⡔⠂⠤⠁⡌⠄⠡⠐⠂⠌⡀⠎⡐⠌⡐⠠⢁⠂⡐⢀⢂⠐⡀⢂⠐⡈⠄⠂⠄⡁⢂⠐⡈⢀⠂⠀⠄⠂⡐⠀⠂⡀
⢞⡼⣎⡷⣹⢎⡶⣱⢮⡵⣣⠖⣍⢦⡱⣍⣎⠶⣡⢒⡡⢒⡉⢆⠫⡔⡩⢞⣱⣛⢦⡙⠦⡘⣅⢚⡬⢣⠽⣘⠣⠁⠏⠴⠉⠀⠀⢀⠞⣭⢳⠃⠔⢡⣴⣾⠟⣡⣞⣤⣠⠄⣤⠈⠈⡑⠂⠆⡠⢀⠀⠀⢂⠤⠀⣄⡘⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⡏⠻⠄⠻⣮⡑⡄⠐⠂⠞⠣⠘⢿⣆⡀⠀⡁⠈⡄⠈⢆⠀⡎⡔⡡⢄⠃⠤⠑⢂⠡⡐⠌⡠⠡⠌⡐⡐⢢⠁⢎⠰⢁⢂⠒⠠⠌⡀⢂⠐⡀⢂⠐⡈⡐⠠⠀⠄⠂⠐⠀⠠⠈⡀⠂⠄⡁⠂⠄
⣽⣳⡝⣾⢱⢫⢞⡵⣳⢯⣳⡻⣜⡲⡽⡹⢞⣻⢧⡟⣴⢣⡜⣮⡱⣬⡑⣎⠴⣩⠲⣍⡖⣱⣬⢳⡜⢣⡑⠌⡐⠉⠰⠈⠀⠀⠀⠌⠒⡴⠣⠊⣴⣿⣿⣯⣾⣿⣿⡿⢻⡟⡔⢣⠒⡁⠁⠀⠀⠀⠡⠀⠀⠈⠣⣄⠳⡘⢾⡿⢿⣿⣿⣿⡿⣿⣿⣿⡌⣟⢆⡀⠙⠈⠣⠀⠀⠀⠈⠀⢺⡧⠀⠀⢀⠂⠀⠈⡆⢱⡹⣜⢮⡙⢦⣉⢆⡱⢌⢢⡑⣌⠢⡑⠌⡆⡙⠤⢁⠂⠂⠌⡐⠠⠐⠠⢀⠐⡀⠂⠡⢀⠡⠈⠄⠂⢀⠂⢁⠐⠠⠁⠂⠀⡁⠂
⠲⢧⢻⡜⢣⠏⡼⢸⡱⢏⠷⣏⡳⢱⢣⡙⢮⡱⢫⡜⣣⠯⣝⡶⣻⢵⣫⢎⡷⣥⢻⣜⣿⣳⢏⡟⠼⣡⢒⡴⣠⢌⡐⠀⠀⠀⠠⠀⠁⠈⠀⢬⣿⣿⣿⣯⡙⣉⡭⡙⠋⠈⠁⠀⡀⢀⠀⠀⠀⠀⠀⠀⠀⠀⢁⠂⠡⢃⢪⠑⠸⢻⣿⡿⢓⣿⣿⣿⠻⠒⣣⠖⠤⠂⠤⢠⠲⡍⢟⣧⡀⢹⡄⢠⡄⠀⡀⠀⢁⠠⡑⢎⠲⣉⠶⡩⢆⡳⢌⡳⡜⢦⠳⣌⠳⡌⠴⣁⠆⡌⢡⠂⠄⢡⠈⠔⡀⢂⠠⠁⡐⠀⡀⠂⠈⠐⡀⠐⠠⢈⠐⠀⠀⡀⢀⠂
⣹⣟⣶⣝⠪⡜⡱⢧⡹⢌⠳⣌⠱⡃⢆⡹⢄⠳⡡⠎⢥⣛⡼⣳⡝⢮⣓⠻⣞⣷⣻⣾⢯⣿⣎⡜⡑⢢⡙⢾⣟⡏⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⢋⡍⠣⠟⠀⠁⢠⠐⠈⠁⠈⠀⠁⠀⠤⢀⠀⠀⠄⡀⠀⠩⠀⢚⠀⠀⢀⣻⣿⣧⠘⣿⣿⠃⡠⠏⠁⠄⠂⠁⠀⠀⠁⠀⠘⠸⢿⣦⡁⠿⡄⠀⠐⢄⡂⠀⢌⢂⠓⣌⠲⡙⢮⢱⢣⠖⡩⢆⠣⣌⠳⡜⡳⣌⠖⡸⢄⠎⡘⢄⠊⡔⢡⢂⠤⡁⠐⠠⠐⡀⢁⠠⠀⠈⠀⠀⠠⠀⡁⠐⠠⠌
⠘⢏⠛⡌⠑⡈⡑⠢⢑⢊⡱⢌⡓⡘⢆⠱⢊⡱⠰⡉⠦⡙⠲⡁⢎⡱⢌⠓⡜⡰⢃⠏⡿⢳⢎⠴⡑⢢⢈⡑⢎⠁⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣯⣀⠋⢠⡟⠀⠀⠲⠈⢀⠀⠆⢀⢀⣀⡀⣀⠈⢓⡆⠀⡐⠀⠀⠀⠀⡀⢀⣾⣿⣿⣿⣿⣦⡀⠰⠋⢀⠄⠂⠀⠀⣀⠄⠠⠤⡀⠀⠈⢻⣿⣆⠡⠀⠀⡸⠀⠐⡌⢎⡱⢀⠣⡘⢂⠇⡎⡜⡱⣊⠖⣌⡱⢬⠱⣎⠝⡱⢋⢮⡱⢌⠲⢌⡱⢊⡔⡡⡉⢆⠡⡐⢢⠐⡴⣠⢆⡤⣁⠐⠠⢁⠂⠄
⠈⠄⠡⢀⠡⠐⡀⢁⠂⠄⠐⠂⡘⠐⡈⠌⡁⠒⠡⠌⠠⠁⠡⠈⠄⡐⢈⠒⠠⠑⡈⠘⠰⡉⢎⠒⣉⠖⢢⠐⠂⠀⠀⠀⠀⠀⠀⠀⠀⣺⡿⣿⣯⠥⠴⠻⠁⠀⢃⣠⣶⣿⣷⣶⣶⣦⣤⣶⢿⣷⡀⠈⠆⡀⠀⠀⠀⠘⣁⣾⠏⢹⣿⣿⣿⣿⣆⠀⢠⠜⠀⢠⠒⡂⠀⠀⠀⠀⠀⠁⢀⠀⠉⣿⡆⠀⠀⠘⠁⠄⠘⠠⠑⠈⠄⡑⠈⠜⠰⡁⠧⡙⢮⡑⢎⢣⡛⡼⣎⠵⣉⠦⡙⢎⡱⢊⠖⣭⠲⣅⠳⣈⠆⡑⢢⠙⡜⠳⡞⣵⢣⣯⡱⢆⡜⡠
⠀⠈⢀⠂⠄⡁⢀⠂⢀⠀⠂⠐⠀⠁⡀⠄⠀⢁⠠⠀⠐⠀⠁⠠⠀⠄⠠⠀⡁⢀⠀⠁⠂⠐⡈⠐⡀⠊⠄⡈⠀⠀⠀⠀⠀⠀⠀⠀⢠⡿⣽⣩⣶⣶⠏⣡⠶⢿⡍⠭⣭⣥⣼⢻⣏⣙⡛⠻⢦⠼⣡⠀⠠⣵⣤⡤⢠⣶⣿⠏⣸⣾⣿⣿⣿⣿⣿⣦⠀⠠⠀⢀⣴⡿⡷⠄⡤⠲⠀⢀⠈⠆⠀⡘⣷⠀⠀⠀⢞⡱⣂⠁⠀⠀⠀⠠⠁⠈⠐⢈⠰⢉⠆⡘⢄⠣⢜⡱⣭⢛⡴⢣⠍⡆⢥⢋⡜⠤⠛⣌⠱⡄⢎⠰⡁⠜⡨⢱⡘⢆⢏⠲⣙⠳⢎⠷
⠀⠌⡀⠄⠂⠐⠠⢀⠂⠠⠐⠀⠌⢀⠀⡀⢈⠀⠠⠐⠀⡈⠄⠡⢈⠐⡀⠁⠄⡀⠀⠠⠈⡀⠄⢁⠠⠁⠂⠀⠀⠀⠀⠀⠀⠀⠀⢀⢺⣿⣿⣛⣭⣶⣾⡿⣿⣭⣉⠥⣄⡌⣩⢉⡉⡉⠛⠳⢒⠂⠓⠛⢂⠽⢉⣴⣿⣿⠏⣴⣿⡿⠙⣩⣿⣿⣿⣿⣦⡀⣀⣌⣖⠳⢲⣷⣶⣷⣿⣷⣦⣄⡀⣿⣿⡄⠀⠀⢪⠴⡡⠎⡄⡀⢀⠀⠀⠈⠀⠀⠄⢈⠐⠌⡠⠓⣎⠵⣎⢧⠸⡥⢞⡜⢎⡖⠬⡑⠩⢄⠣⢜⡈⠖⡡⢊⠔⣡⠘⡄⢊⠐⠡⠘⡈⠐
⠀⢂⠐⠠⠁⠌⡐⠠⢀⡁⢂⠡⡈⢄⠢⢐⠠⣈⠐⣀⠂⠄⢂⠁⢂⠂⠤⢁⠢⢀⡁⢂⠡⠐⡈⠄⢂⠡⠌⡀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣵⣤⣦⣤⣡⣡⣀⠠⡈⣠⣤⣶⣾⣿⣿⣿⣟⣾⠏⢀⣴⣿⣿⣿⣿⣿⣿⣿⣷⡈⠖⠈⠄⢩⠹⢭⣿⣿⣿⣿⣟⣛⣽⣿⡇⠀⠀⢣⢣⠑⡘⠤⡑⢢⠐⡠⠀⠀⠀⠀⠀⠈⠐⡁⢣⠘⡜⠰⡊⠵⣈⠧⡘⢢⠘⠄⡁⠃⠌⡐⠂⠌⠠⠁⠌⠂⢅⡚⡔⣣⠜⡤⢃⡴⢡
⠀⠂⠌⡐⢈⠐⠠⠁⠂⠐⡀⠂⡁⢂⠁⠊⡐⠠⠈⠄⡈⠐⠠⠈⠄⠈⠐⠀⠂⠀⠐⠀⠂⠁⡐⠈⢀⠂⡐⠁⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⣠⠋⡜⠳⠾⠿⠿⣬⠉⢿⢷⡉⣦⣄⣀⣀⢡⣤⣴⣶⣬⣩⣭⣿⣾⣿⣏⠀⢀⢣⠂⡍⠰⢡⠘⣄⠫⢔⡱⢂⠄⡀⠀⠀⠀⠀⠀⠱⢈⠱⢈⠆⠡⢂⠑⢂⠩⠄⡑⡈⡐⠠⠈⠄⡁⠂⡄⣁⠢⠐⡱⢨⠙⡜⠱⣊⠳
⢈⡐⠠⢀⠂⢈⠀⠄⠁⠀⠀⠐⠀⠠⢈⠀⡀⠀⠀⠂⢀⠡⠀⠀⠐⡈⠀⠀⠀⠀⡀⠐⡀⠄⡀⠐⡀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢋⣥⠖⠛⠁⠒⡈⠁⠌⢉⠱⠀⠂⢀⠪⠁⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⢆⠩⡐⢉⠢⡑⢢⢍⢲⡐⢣⠘⠤⣁⢂⠀⠀⠀⠄⠀⠀⠂⠌⠡⠀⠌⠀⡐⢈⠐⡐⠠⡑⢌⠰⢀⠡⡐⢄⠢⡑⢄⠣⡐⢌⠱⣀⠣
⠢⡜⣐⠂⡌⢀⠂⠠⢀⠂⢁⠐⢈⠐⠢⠡⠐⡀⠀⠀⠀⠀⠀⢀⠂⢁⠁⢂⠀⠀⡐⠤⠐⢂⠑⠂⢀⡀⢀⠀⢀⠤⣄⠀⠀⡌⢰⢋⡞⣿⣻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠰⢋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⢂⠐⠠⠑⡌⢃⠎⡱⢌⠣⣉⠒⠤⢊⠜⠰⢠⢀⠀⠂⠀⠀⠁⠈⠀⢀⠀⢀⠂⠄⠡⠐⡈⠰⡈⠔⡡⢊⠴⡑⡊⡔⡉⠦⡑⠤⢃
⢱⡘⠴⣩⢒⠤⢊⠔⡂⢜⡠⢊⠄⠂⡁⠄⠡⢀⠡⠀⠂⠄⠁⡀⠄⢠⠈⡔⡈⠔⡐⠢⡁⢂⠈⡜⣱⠎⡱⠀⠁⠀⠈⡇⠀⠀⣎⢼⣹⢳⣝⡻⣞⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢡⠃⡰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⡈⠠⢁⠘⠠⢊⠐⡀⠒⡠⢉⠆⡡⢊⠱⢌⠪⢜⡠⢄⠀⠀⠀⠀⠀⠀⠀⠈⠄⢃⡐⢁⠂⡱⢘⡰⣉⠶⡱⠱⢤⡙⢦⡹⢌⡣
⡅⢎⡱⣡⠫⣜⠡⢎⡘⢄⠢⠡⢌⠒⡰⢈⠒⡄⢂⡁⠂⠌⡐⢠⠘⡄⢣⠐⣌⠰⣀⢣⡔⣦⠃⢈⠀⠤⡁⠀⠀⠀⡄⢸⠀⢨⢟⡎⣯⢗⢮⠳⣍⠟⣧⢟⡿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠟⡛⠛⠛⣁⡴⠾⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⠹⠋⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠀⠄⡁⠠⢈⠐⡀⠠⠀⠁⠄⡁⢊⠰⣁⠫⣌⢓⠢⡑⠬⡘⠤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠐⠠⢁⠂⠡⢃⠍⡓⢦⡹⢦⡙⠦⡱
⡝⢮⡑⢆⠳⢌⢃⠒⡌⠢⣁⠣⠌⢢⠑⠌⡒⠌⢢⠐⡉⢆⡑⢢⡑⢌⠢⡑⠌⡱⢈⠆⣹⢂⡔⣠⠙⣦⠃⠀⠀⣸⣠⡄⠂⢈⡮⣝⣎⠿⣌⡓⢌⠫⡜⢪⡝⣹⢯⣿⣿⠟⣫⠽⠏⠉⠐⢀⣤⣶⣿⡟⢻⡇⢀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠉⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⠀⢀⠂⠄⡁⠂⠄⠀⠄⢀⠈⢀⠠⠀⡐⢄⠫⡜⡌⡓⢌⠢⠑⡈⠄⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢈⠐⠠⠊⡅⢣⠙⢢⠙⣢⠱
⡜⣡⠚⡌⡘⢄⠊⡔⢠⠡⡐⢌⠢⠡⢌⠒⡤⣉⠆⠥⡉⠆⡜⢡⡘⢬⠱⢌⠒⡄⢢⠘⢲⢫⢒⠡⢛⠰⠀⠃⢀⡏⣿⡷⠀⠈⢶⢩⡎⣟⠶⣩⠌⡑⢌⠣⡜⢥⡛⡜⢮⡙⠂⠀⠀⠠⡴⡿⢻⡿⠟⠁⠋⠁⠁⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠤⡀⠀⠈⢿⣿⣿⣿⣿⣟⡳⠀⠀⠈⠐⠠⠁⠌⡀⢂⠠⠀⠂⢀⠐⡀⠎⠰⠐⡈⠱⠈⠄⠁⢀⠀⠂⠀⡀⠁⠐⡀⢀⠀⠀⠀⠀⠀⠀⠡⠁⠒⡈⠤⢁⠂⠡⢀⠃
⡰⣁⠞⡤⢩⠜⡒⢌⢆⡱⢌⠦⣉⠳⣌⢓⢲⡱⢮⡱⣘⠰⣌⠢⢜⢢⡙⢬⠱⡘⢤⢋⠴⣈⠦⡱⣈⠤⠀⠃⢸⠅⣹⠁⠀⠀⢊⢶⡹⠎⣳⠄⠑⢦⠨⠑⡌⠰⣍⢎⠑⠀⠀⠀⢠⠎⠓⠁⠉⠀⠘⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣟⡶⡏⠀⠀⠀⠀⠁⠈⠐⡀⠂⠄⠐⠀⠠⠀⠐⠈⠄⠡⢀⠁⠌⠀⠈⠀⠀⠀⠀⠀⠀⠂⠀⠄⠂⡐⢀⠀⠀⠀⠀⠀⠀⠐⠐⠂⠌⠐⡀⠂
⠴⣈⠚⡤⢃⡚⣬⡘⢆⡜⣪⢱⡉⠖⡨⠌⢢⢙⠳⢲⠩⠳⢌⡑⢊⠦⣙⢆⢣⡍⠶⣩⠖⣭⢲⡱⢦⡹⡁⢸⣞⠀⢹⠀⠀⠀⢍⠶⠁⣘⡁⠆⡛⠌⠀⡹⢀⡳⠌⠂⠀⠀⡀⠔⠁⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠘⢿⣟⣾⣳⠅⠀⠀⠀⠀⠀⠀⠀⠀⡁⠂⠄⠂⠁⠠⠈⠐⡀⠂⡀⠠⠀⠠⠁⠀⠄⠂⠀⠀⠀⠀⠁⡀⢂⠐⠠⠊⡔⢠⠀⠀⠀⠀⠀⠀⠀⠂⠄⡁
⠦⣁⠏⠴⡩⢞⡱⡽⢮⣝⣧⠧⡘⠠⠐⡈⠄⡈⢡⠂⡁⢁⠂⡜⡈⠖⣩⢾⣿⡞⢧⢃⠞⠴⢣⡝⢦⠳⢥⠈⣏⣤⡈⠀⠀⠀⠈⡀⢸⠀⠁⢠⢃⠀⡰⢹⠐⣣⠁⠀⠠⠆⠁⠀⠈⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠆⠌⠄⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣞⣷⣏⠀⠠⢁⠂⡀⢀⠀⠀⠀⠀⠁⠐⠠⠁⠂⡁⢂⠐⠠⠐⠀⠄⠁⠠⠁⠀⡀⠄⠂⠀⠀⠀⠀⠀⠌⡐⠡⠌⢂⠌⣁⠂⠄⡀⠀⠀⠀⠂⠀
⢆⡱⡈⢇⠜⣠⠱⣌⣳⢎⠶⡡⠃⢁⠆⡐⢠⠘⣦⢳⡐⢂⠐⠠⠑⡈⠔⢫⠱⣌⢣⣞⡿⣖⡄⠚⢌⠳⣘⠈⢏⠁⠀⠀⠀⠀⢀⠀⠀⠀⡄⠈⠈⠠⢁⠇⡸⠀⠀⡔⠁⠄⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠠⠁⠂⠄⡀⠂⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⡦⠀⢡⠂⡔⢀⠂⡐⢀⠀⠀⠀⠀⠁⠠⢁⠐⠠⢈⠐⠠⠁⠌⠠⠁⡀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠡⠘⡀⢂⠄⠨⠐⡠⢁⠆⢠⠀⠀
⢢⠱⡘⣌⠲⡡⠞⠽⠟⠏⠂⢠⠰⢌⠰⣀⠃⡜⢠⠃⡔⡈⠔⡡⠒⣌⠰⢂⠧⡘⠧⣚⠱⡰⢌⠣⣌⠳⣌⠐⣄⣁⡠⠀⠀⠀⢨⡀⠐⠈⠠⢂⠁⡔⠃⠖⠁⠀⠜⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⠀⠀⠀⠐⠀⠀⠀⠀⢀⠀⠰⠀⠀⠀⠀⠀⠀⠀⠡⠄⠀⢢⠑⡌⢂⡒⢄⠂⠄⡀⠀⠀⠀⠀⠀⠌⠐⠠⠈⠄⠡⠈⠄⡁⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢁⠂⠌⠠⠑⡠⠃⡜⢠⠃⢆
⢂⠧⡱⢈⠖⡡⢃⠤⡠⢔⢪⡑⢎⡜⢢⡑⢎⠴⣡⢚⢤⡑⢎⡔⣩⠔⣣⢍⢢⡑⢎⡔⢣⡑⢎⡱⢌⠳⡨⢄⠉⠏⠁⠀⠀⠀⠄⠀⠀⠂⠀⢈⠤⡐⢂⡀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠐⡂⠀⠢⢍⠰⠡⠘⢂⠁⠂⠄⢂⠡⠀⠀⠀⠀⠀⠁⠈⠄⠡⠈⠄⡐⠀⠄⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠈⠠⠁⢂⠁⠒⡈⠤⡉⠄
⠌⡆⠱⡈⢆⢡⠋⡖⢭⠎⡦⣙⠦⡘⢥⠚⣬⢚⡴⣋⠶⣩⠖⡼⣡⢟⡦⢏⠶⣩⢖⡬⠣⢜⠢⢜⢢⢃⠷⡘⢆⡀⠀⠀⠀⠀⢂⠐⠀⠀⠰⢉⠂⢔⠣⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠡⠀⠐⡈⠄⢂⠁⡎⡔⣩⠐⡄⠂⢁⠐⠀⠀⠀⠀⠈⠠⠑⡈⡐⠠⢈⠀⡐⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⢀⠠⠈⠄⡁⠒⡈⠔
⠳⣌⠣⣕⢊⠦⣙⢸⡘⣾⣱⣎⢮⠱⣊⠵⣊⠷⡸⢥⡛⡴⣋⠶⣙⠮⡜⣭⢚⡵⡚⡼⡑⣎⡱⢎⠶⣩⢞⣙⢮⡱⠀⠀⠀⠀⠈⠂⠀⣘⠀⠉⠐⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⣀⢀⡀⢀⡀⣀⢄⡠⣀⢄⡠⢀⣀⣀⢀⡀⢀⠀⠀⠀⠀⠀⠀⢂⠀⠀⠀⠀⠀⠀⠄⠀⠐⡈⢆⡱⢘⠲⣅⠳⢠⠁⢂⠈⡐⠀⠀⠀⠀⠀⠀⠐⠠⢁⠂⡐⠀⡐⠈⠀⠐⠀⠀⡐⠀⠁⢀⠀⠀⠄⠀⡀⠀⢂⠐⡈⠐⡐⢈
⠱⣊⠳⣌⠳⣘⠴⣣⢟⡳⢏⡞⢆⠧⡑⢮⠥⢫⣑⢣⡙⢴⢩⢚⠥⣋⠶⣘⠲⣌⠳⣅⠫⣔⢣⢏⡞⡱⢎⡎⢇⠣⠄⠀⠀⠀⠀⠀⠡⡈⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡁⢂⠄⡄⠢⠐⢦⡑⢊⠇⠓⡌⢧⠹⣃⡙⠣⣌⣁⢛⡎⡷⢫⡾⣽⢯⣿⢯⡟⣞⢦⣤⢲⠠⠁⠆⠀⠀⠀⠀⠀⠀⠀⠀⠈⢆⠢⢉⠒⠄⢃⠂⠡⢂⠐⠠⠐⠀⠀⠀⠀⠀⠀⠀⠀⠂⠄⡁⠀⠀⠈⠀⠄⠁⢀⠠⠈⠀⡀⠂⢀⠂⢀⠡⠀⠄⢀⠁⡐⠠
⠱⡌⠳⣌⠳⣌⢏⢧⢫⠜⣱⠚⡼⣘⠭⡲⢍⡳⢌⢦⡙⢆⠣⢎⠲⣡⠒⡥⣓⢬⢳⣬⢓⣎⠳⢎⡜⡡⢇⡜⡈⠡⠀⠀⠀⠀⠀⠀⠀⢰⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠡⠐⣂⠢⡌⣅⢚⡰⢌⣣⠀⣞⠡⣏⠞⡄⠉⢇⠀⠢⠈⡜⢡⠋⡁⠋⠎⡘⠫⣝⠫⣾⣱⢫⣜⠂⠈⠀⠀⠀⠀⠀⠀⠀⢁⠊⠄⡑⠠⠀⠌⠠⢈⠐⡀⠌⠀⠄⡀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠠⠁⠐⠀⠁⠀⠄⠀⠠⠐⠀⡀⠐⠠⠐⡀⠄⠂⠀⠂⠀⡀⠄
⡱⢌⠳⣌⠳⡜⢎⠮⡱⢎⡕⣋⠶⡩⢖⡙⣎⡱⢎⠦⡙⣌⠳⣎⢳⢆⡻⡴⣋⣞⢣⢎⡳⢌⡙⠦⢌⡑⠢⠐⠀⠁⠀⠀⠀⠀⠀⠀⠀⣈⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⢨⠑⣢⠓⡸⠄⢃⠜⠂⠀⡘⠈⡀⠌⠒⠀⠁⠈⠐⠀⡀⠌⠀⡐⠈⠀⠀⠁⠄⠸⠐⡤⣉⠳⣎⢳⡀⠀⠀⠀⠀⠀⠀⠀⠀⠌⡐⠠⢁⠊⠤⢁⢂⡐⠠⢀⠁⠂⠄⠀⡈⠀⠄⢀⠀⠄⡠⠀⠀⠀⠂⠈⡀⠈⠀⠌⠀⠄⠂⠀⠌⡐⠠⠀⠄⠂⠁⠠⠐⠀⡀
⠴⣉⠶⣡⢛⢬⢣⠣⣕⠪⡜⣘⠖⣩⠚⣔⢣⠞⣬⢳⡹⣞⡽⣎⡟⢮⡳⣍⠳⣌⠣⢎⡐⢣⠘⡐⠂⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⡡⠚⠤⢡⠁⡀⠎⠀⠀⠀⠀⠀⠀⠄⠀⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⡴⢐⡳⢬⡜⣱⣃⠀⠀⠀⠀⠀⠀⠀⠈⣆⠡⢂⠅⡊⠔⡡⢂⠄⢣⠐⡨⠐⡈⠀⠄⡐⠈⡀⠌⡐⣁⠊⡄⠀⡄⢂⠄⢁⠐⠀⠂⠠⠈⡐⠠⠐⡀⠡⠀⢀⠂⠁⡀⠂⠄
⣒⢡⢚⡤⣋⢦⢣⠓⣌⠳⣌⠱⡊⠔⣭⢊⢦⡙⣦⢏⡷⡹⢞⡬⣙⢆⠳⡌⡓⢌⠒⠤⡘⠄⠃⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢠⠁⠊⠔⠂⡀⠆⠀⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠁⣔⠫⣁⠳⡜⣠⠇⠂⠀⠀⠀⠀⠀⢀⡼⡧⢏⡖⢬⠐⡡⢂⠅⡊⢄⠣⢐⠡⢂⠍⡐⣀⢂⠐⣀⠣⣟⡿⣜⠡⠘⠂⠌⡀⠠⠐⠈⢀⠡⢀⠁⢂⠐⠀⠐⠀⢀⠐⢀⠁⠂
⡜⢢⣏⠶⡝⡎⠥⠋⠴⢣⠜⠀⣠⠚⣤⢋⢦⡙⢦⣋⠶⡙⣌⠒⡥⢊⠵⣈⠱⣈⠜⠢⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠁⠀⠀⠂⠐⠀⠀⡀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⢈⠤⣀⠓⢌⠐⡀⠀⠀⠀⠀⠀⠀⠀⢍⡻⣝⠾⣥⣏⠴⡁⢎⡘⢄⠣⠌⡐⡈⠤⢑⠠⢊⡔⢀⠂⠌⡙⠌⠂⢁⠈⢀⠠⢀⠀⡐⠀⠂⠌⡐⠠⠀⢈⠀⠄⠂⡀⠂⠌⡐
⡜⢣⢎⣽⣸⣵⣩⣽⡟⠁⢀⠢⣥⢛⡤⣋⠶⡙⡆⡇⢧⠱⡌⢚⠰⣉⠒⡌⠱⡐⠌⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⠀⠄⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠂⢁⠀⠂⠀⠈⠀⠀⠀⠀⠀⠀⠀⣀⠑⠎⠿⣼⢯⡗⣍⠢⠜⡠⢃⡜⢠⠑⢢⠡⢎⡥⡘⢤⡈⠔⡠⠈⠐⠠⢀⠠⢀⠂⠴⡐⢄⠈⠀⠄⠐⡀⠠⠀⠄⠂⠄⡁⠂⠄
⣜⣻⡾⣯⣟⣾⡟⠁⠀⢠⣌⠳⣜⢣⢎⡱⢊⠵⡘⠜⣂⠓⡌⢡⠒⠄⠣⢌⠑⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡐⠂⠡⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⣶⣤⣉⠳⡝⢦⡙⢬⡑⢦⠘⡤⢉⠦⡙⢎⠖⡩⢆⠸⡱⢧⡏⡔⣁⠂⡐⠠⢈⠐⡉⠄⡈⠀⠠⠀⢀⠐⠀⡈⠐⠠⠀⡁⠂
⣼⠟⠼⡱⠿⠓⠀⠀⠌⠃⠈⠓⠈⠒⠨⠐⠉⠢⠉⠂⠅⠊⠄⠡⠈⠌⠁⠂⠀⠡⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠢⠐⠀⢈⠙⠳⠤⠁⡘⠦⠳⠌⠳⠌⠣⢆⠹⠌⠌⠱⠨⠑⠌⠢⠄⠔⠢⠓⠌⠱⠈⠖⠠⠂⠄⠀⠐⠈⠄⠀⠂⠀⠐⠀⠀⠀⠄
]]

return M
