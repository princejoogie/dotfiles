#!/usr/bin/env node

const { spawn } = require("child_process");
const { writeFileSync } = require("fs");

const clangdContent = (paths) => `CompileFlags:
  Add: [
    -I${paths}
  ]
`;

function runCommand(cmd, args) {
  return new Promise((resolve, reject) => {
    const child = spawn(cmd, args);

    let output = '';

    child.stdout.on('data', (data) => {
      process.stdout.write(data);
      output += data.toString();
    });

    child.stderr.on('data', (data) => {
      process.stderr.write(data);
    });

    child.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`Command failed with exit code ${code}`));
      } else {
        resolve(output);
      }
    });
  });
}

const main = async () => {
  console.log("Getting idestate...");
  const raw = await runCommand('pio', ['-f', '-c', 'vim', 'run', '-t', 'idedata', '-d', process.cwd()]);
  const out = raw.split("\n").filter((l) => Boolean(l) && l.startsWith("{"));

  if (out.length <= 0) {
    console.log("ERROR: json object not found");
    return process.exit(1);
  }

  const json = JSON.parse(out[0]);
  const paths = [];

  if (json.libsource_dirs) {
    for (line of json.libsource_dirs) paths.push(line);
  }

  if (json.includes.build) {
    for (line of json.includes.build) paths.push(line);
  }

  if (json.includes.compatlib) {
    for (line of json.includes.compatlib) paths.push(line);
  }

  if (json.includes.toolchain) {
    for (line of json.includes.toolchain) paths.push(line);
  }

  const str = paths.join(",\n    -I");
  writeFileSync(".clangd", clangdContent(str));
};

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
